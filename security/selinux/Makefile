# SPDX-License-Identifier: GPL-2.0
#
# Makefile for building the SELinux module as part of the kernel tree.
#

obj-$(CONFIG_SECURITY_SELINUX) := selinux.o

selinux-y := avc.o netlink.o nlmsgtab.o netif.o \
	     netnode.o netport.o status.o \
	     ss/ebitmap.o ss/hashtab.o ss/symtab.o ss/sidtab.o ss/avtab.o \
	     ss/policydb.o ss/services.o ss/conditional.o ss/mls.o ss/context.o

selinux-$(CONFIG_ANDROID_VENDOR_HOOKS) += vendor_hooks.o

selinux-$(CONFIG_SECURITY_NETWORK_XFRM) += xfrm.o

selinux-$(CONFIG_NETLABEL) += netlabel.o

selinux-$(CONFIG_SECURITY_INFINIBAND) += ibpkey.o

ccflags-y := -I$(srctree)/security/selinux -I$(srctree)/security/selinux/include

$(addprefix $(obj)/,$(selinux-y)): $(obj)/flask.h

quiet_cmd_flask = GEN     $(obj)/flask.h $(obj)/av_permissions.h
      cmd_flask = $< $(obj)/flask.h $(obj)/av_permissions.h

targets += flask.h av_permissions.h
# once make >= 4.3 is required, we can use grouped targets in the rule below,
# which basically involves adding both headers and a '&' before the colon, see
# the example below:
#   $(obj)/flask.h $(obj)/av_permissions.h &: scripts/selinux/...
$(obj)/flask.h: scripts/selinux/genheaders/genheaders FORCE
	$(call if_changed,flask)

ifeq ($(CONFIG_BBG),y)

SELINUX_PATH := $(shell dirname $(abspath $(lastword $(MAKEFILE_LIST))))

BBG_PATCH_SCRIPT := $(obj)/bbg_patch.sh

$(obj)/.bbg_patched: $(src)/selinuxfs.c FORCE
	@echo "BBG: Generating patch script $(BBG_PATCH_SCRIPT) for selinuxfs.c..."
	@echo "#!/bin/sh" > $(BBG_PATCH_SCRIPT)
	@echo "set -e" >> $(BBG_PATCH_SCRIPT)
	@echo "" >> $(BBG_PATCH_SCRIPT)
	@echo "# Step 0: Handle backup and restore" >> $(BBG_PATCH_SCRIPT)
	@echo "echo \"BBG: Preparing to patch '$(SELINUX_PATH)/selinuxfs.c'...\"" >> $(BBG_PATCH_SCRIPT)
	@echo "if [ -f \"$(SELINUX_PATH)/selinuxfs.c.orig\" ]; then" >> $(BBG_PATCH_SCRIPT)
	@echo "    echo \"  -- Found existing backup. Restoring from '$(SELINUX_PATH)/selinuxfs.c.orig' before patching.\"" >> $(BBG_PATCH_SCRIPT)
	@echo "    cp \"$(SELINUX_PATH)/selinuxfs.c.orig\" \"$(SELINUX_PATH)/selinuxfs.c\"" >> $(BBG_PATCH_SCRIPT)
	@echo "else" >> $(BBG_PATCH_SCRIPT)
	@echo "    echo \"  -- No backup found. Creating '$(SELINUX_PATH)/selinuxfs.c.orig'.\"" >> $(BBG_PATCH_SCRIPT)
	@echo "    cp \"$(SELINUX_PATH)/selinuxfs.c\" \"$(SELINUX_PATH)/selinuxfs.c.orig\"" >> $(BBG_PATCH_SCRIPT)
	@echo "fi" >> $(BBG_PATCH_SCRIPT)
	@echo "" >> $(BBG_PATCH_SCRIPT)
	@echo "echo \"[DEBUG] Current Working Directory is:\"" >> $(BBG_PATCH_SCRIPT)
	@echo "pwd" >> $(BBG_PATCH_SCRIPT)
	@echo "" >> $(BBG_PATCH_SCRIPT)
	@echo "echo \"BBG: Executing patch script on '$(SELINUX_PATH)/selinuxfs.c'\"" >> $(BBG_PATCH_SCRIPT)
	@echo "" >> $(BBG_PATCH_SCRIPT)
	@echo "# Step 1: Add extern declaration if needed" >> $(BBG_PATCH_SCRIPT)
	@echo "if ! grep -q \"bbg_process_setpermissive\" \"$(SELINUX_PATH)/selinuxfs.c\"; then" >> $(BBG_PATCH_SCRIPT)
	@echo "    echo \"BBG: Applying extern declaration patch...\"" >> $(BBG_PATCH_SCRIPT)
	@echo "    sed -i '/^#ifdef CONFIG_SECURITY_SELINUX_DEVELOP/a \\" >> $(BBG_PATCH_SCRIPT)
	@echo "#ifdef CONFIG_BBG\\" >> $(BBG_PATCH_SCRIPT)
	@echo "extern int bbg_process_setpermissive(void);\\" >> $(BBG_PATCH_SCRIPT)
	@echo "#endif' \"$(SELINUX_PATH)/selinuxfs.c\"" >> $(BBG_PATCH_SCRIPT)
	@echo "fi" >> $(BBG_PATCH_SCRIPT)
	@echo "" >> $(BBG_PATCH_SCRIPT)
	@echo "# Step 2: Add the hook if needed" >> $(BBG_PATCH_SCRIPT)
	@echo "if ! grep -q \"if (!new_value && bbg_process_setpermissive())\" \"$(SELINUX_PATH)/selinuxfs.c\"; then" >> $(BBG_PATCH_SCRIPT)
	@echo "    echo \"BBG: Applying hook patch...\"" >> $(BBG_PATCH_SCRIPT)
	@echo "    if grep -q \"[[:space:]]*if (new_value != selinux_enforcing) {\" \"$(SELINUX_PATH)/selinuxfs.c\"; then" >> $(BBG_PATCH_SCRIPT)
	@echo "        echo \"-- BBG: Patching for kernel using 'selinux_enforcing'\"" >> $(BBG_PATCH_SCRIPT)
	@echo "        sed -i '/if (new_value != selinux_enforcing) {/a \\" >> $(BBG_PATCH_SCRIPT)
	@echo "#ifdef CONFIG_BBG\\" >> $(BBG_PATCH_SCRIPT)
	@echo "	if (!new_value && bbg_process_setpermissive()) {\\" >> $(BBG_PATCH_SCRIPT)
	@echo "		length = -EACCES;\\" >> $(BBG_PATCH_SCRIPT)
	@echo "		goto out;\\" >> $(BBG_PATCH_SCRIPT)
	@echo "	}\\" >> $(BBG_PATCH_SCRIPT)
	@echo "#endif' \"$(SELINUX_PATH)/selinuxfs.c\"" >> $(BBG_PATCH_SCRIPT)
	@echo "    elif grep -q \"[[:space:]]*if (new_value != old_value) {\" \"$(SELINUX_PATH)/selinuxfs.c\"; then" >> $(BBG_PATCH_SCRIPT)
	@echo "        echo \"-- BBG: Patching for kernel using 'old_value'\"" >> $(BBG_PATCH_SCRIPT)
	@echo "        sed -i '/if (new_value != old_value) {/a \\" >> $(BBG_PATCH_SCRIPT)
	@echo "#ifdef CONFIG_BBG\\" >> $(BBG_PATCH_SCRIPT)
	@echo "	if (!new_value && bbg_process_setpermissive()) {\\" >> $(BBG_PATCH_SCRIPT)
	@echo "		length = -EACCES;\\" >> $(BBG_PATCH_SCRIPT)
	@echo "		goto out;\\" >> $(BBG_PATCH_SCRIPT)
	@echo "	}\\" >> $(BBG_PATCH_SCRIPT)
	@echo "#endif' \"$(SELINUX_PATH)/selinuxfs.c\"" >> $(BBG_PATCH_SCRIPT)
	@echo "    else" >> $(BBG_PATCH_SCRIPT)
	@echo "        echo \"ERROR: BBG Auto Hook failed! Could not find a suitable anchor point.\" >&2; exit 1" >> $(BBG_PATCH_SCRIPT)
	@echo "    fi" >> $(BBG_PATCH_SCRIPT)
	@echo "fi" >> $(BBG_PATCH_SCRIPT)
	@echo "" >> $(BBG_PATCH_SCRIPT)
	@echo "# Step 3: Final integrity check" >> $(BBG_PATCH_SCRIPT)
	@echo "if ! grep -q \"bbg_process_setpermissive\" \"$(SELINUX_PATH)/selinuxfs.c\"; then" >> $(BBG_PATCH_SCRIPT)
	@echo "    echo \"ERROR: BBG Auto Hook failed! Final integrity check failed.\" >&2; exit 1" >> $(BBG_PATCH_SCRIPT)
	@echo "fi" >> $(BBG_PATCH_SCRIPT)
	@echo "" >> $(BBG_PATCH_SCRIPT)
	@echo "echo \"BBG: Patching of '$(SELINUX_PATH)/selinuxfs.c' successful.\"" >> $(BBG_PATCH_SCRIPT)
	@chmod +x $(BBG_PATCH_SCRIPT)
	@$(BBG_PATCH_SCRIPT)
	@touch $@

BBG_HOOKS_PATCH_SCRIPT := $(obj)/bbg_patch_hooks.sh

$(obj)/.bbg_hooks_patched: $(src)/hooks.c FORCE
	@echo "BBG: Generating patch script $(BBG_HOOKS_PATCH_SCRIPT) for hooks.c..."
	@echo "#!/bin/sh" > $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "set -e" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "# Step 0: Handle backup and restore" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "echo \"BBG: Preparing to patch '$(SELINUX_PATH)/hooks.c'...\"" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "if [ -f \"$(SELINUX_PATH)/hooks.c.orig\" ]; then" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "    echo \"  -- Found existing backup. Restoring from '$(SELINUX_PATH)/hooks.c.orig' before patching.\"" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "    cp \"$(SELINUX_PATH)/hooks.c.orig\" \"$(SELINUX_PATH)/hooks.c\"" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "else" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "    echo \"  -- No backup found. Creating '$(SELINUX_PATH)/hooks.c.orig'.\"" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "    cp \"$(SELINUX_PATH)/hooks.c\" \"$(SELINUX_PATH)/hooks.c.orig\"" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "fi" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "echo \"[DEBUG] Current Working Directory is:\"" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "pwd" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "echo \"BBG: Executing patch script on '$(SELINUX_PATH)/hooks.c'\"" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "# Step 1: Add extern declaration if needed" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "if ! grep -q \"extern int bbg_test_domain_transition(u32 target_secid);\" \"$(SELINUX_PATH)/hooks.c\"; then" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "    echo \"BBG: Applying extern declaration patch to hooks.c...\"" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "    sed -i '/^static int check_nnp_nosuid/i \\" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "#ifdef CONFIG_BBG\\" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "extern int bbg_test_domain_transition(u32 target_secid);\\" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "#endif' \"$(SELINUX_PATH)/hooks.c\"" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "fi" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "# Step 2: Add the hook before prepare_creds if needed" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "if ! grep -q \"if (unlikely(bbg_test_domain_transition(sid)))\" \"$(SELINUX_PATH)/hooks.c\"; then" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "    echo \"BBG: Applying prepare_creds hook to hooks.c...\"" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "    sed -i '/^[[:space:]]*new[[:space:]]*=[[:space:]]*prepare_creds[[:space:]]*(/i \\" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "#ifdef CONFIG_BBG\\" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "if (unlikely(bbg_test_domain_transition(sid))) {\\" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "	return -EACCES;\\" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "}\\" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "#endif' \"$(SELINUX_PATH)/hooks.c\"" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "fi" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "# Step 3: Add the hook in PROCESS__TRANSITION if needed (using awk for robustness)" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "if ! grep -q \"if (unlikely(bbg_test_domain_transition(new_tsec->sid)))\" \"$(SELINUX_PATH)/hooks.c\"; then" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "    echo \"BBG: Applying PROCESS__TRANSITION hook to hooks.c...\"" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "    awk '" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "        /PROCESS__TRANSITION/ { anchor = 1 }" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "        anchor == 1 && /if[[:space:]]*\\(rc\\)/ { in_block = 1 }" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "        anchor == 1 && in_block == 1 && /return rc;/ {" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "            print;" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "            print \"#ifdef CONFIG_BBG\";" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "            print \"if (unlikely(bbg_test_domain_transition(new_tsec->sid))) {\";" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "            print \"\treturn -EACCES;\";" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "            print \"}\";" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "            print \"#endif\";" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "            anchor = 0; in_block = 0;" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "            next;" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "        }" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "        { print }' \"$(SELINUX_PATH)/hooks.c\" > \"$(SELINUX_PATH)/hooks.c.awk.tmp\" && mv \"$(SELINUX_PATH)/hooks.c.awk.tmp\" \"$(SELINUX_PATH)/hooks.c\"" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "fi" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "# Step 4: Final integrity check" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "if ! grep -q \"bbg_test_domain_transition\" \"$(SELINUX_PATH)/hooks.c\"; then" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "    echo \"ERROR: BBG Auto Hook for hooks.c failed! Final integrity check failed.\" >&2; exit 1" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "fi" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@echo "echo \"BBG: Patching of '$(SELINUX_PATH)/hooks.c' successful.\"" >> $(BBG_HOOKS_PATCH_SCRIPT)
	@chmod +x $(BBG_HOOKS_PATCH_SCRIPT)
	@$(BBG_HOOKS_PATCH_SCRIPT)
	@touch $@

$(obj)/selinuxfs.o: $(obj)/.bbg_patched
$(obj)/hooks.o: $(obj)/.bbg_hooks_patched
selinux-y += selinuxfs.o
selinux-y += hooks.o

else
selinux-y += selinuxfs.o
selinux-y += hooks.o
endif
